#!/usr/bin/env node

const https = require('https');

async function checkProjectDomain(domain) {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–æ–º–µ–Ω—É: ${domain}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
    await checkDomain(domain);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º www –≤–µ—Ä—Å–∏—é
    if (!domain.startsWith('www.')) {
      await checkDomain(`www.${domain}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Vercel –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await checkVercelHeaders(domain);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${domain}:`, error.message);
  }
}

function checkDomain(domain) {
  return new Promise((resolve, reject) => {
    const url = `https://${domain}`;
    
    const req = https.get(url, (res) => {
      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${domain}:`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
      console.log(`   –°–µ—Ä–≤–µ—Ä: ${res.headers.server || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   Vercel ID: ${res.headers['x-vercel-id'] || '–ù–µ –Ω–∞–π–¥–µ–Ω'}`);
      console.log(`   Vercel Cache: ${res.headers['x-vercel-cache'] || '–ù–µ –Ω–∞–π–¥–µ–Ω'}`);
      console.log(`   Content-Type: ${res.headers['content-type'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      
      if (res.headers['x-vercel-id']) {
        console.log(`   ‚úÖ –î–æ–º–µ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Vercel –ø—Ä–æ–µ–∫—Ç—É`);
      } else {
        console.log(`   ‚ùå –î–æ–º–µ–Ω –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Vercel –ø—Ä–æ–µ–∫—Ç—É`);
      }
      
      resolve();
    });
    
    req.on('error', (error) => {
      console.error(`‚ùå ${domain} - –û—à–∏–±–∫–∞:`, error.message);
      reject(error);
    });
    
    req.setTimeout(10000, () => {
      console.error(`‚è∞ ${domain} - –¢–∞–π–º–∞—É—Ç`);
      req.destroy();
      reject(new Error('Timeout'));
    });
  });
}

function checkVercelHeaders(domain) {
  return new Promise((resolve, reject) => {
    const url = `https://${domain}`;
    
    const req = https.get(url, (res) => {
      console.log(`\nüîß Vercel –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è ${domain}:`);
      
      const vercelHeaders = {
        'x-vercel-id': res.headers['x-vercel-id'],
        'x-vercel-cache': res.headers['x-vercel-cache'],
        'x-vercel-edge-region': res.headers['x-vercel-edge-region'],
        'server': res.headers['server']
      };
      
      Object.entries(vercelHeaders).forEach(([key, value]) => {
        if (value) {
          console.log(`   ${key}: ${value}`);
        }
      });
      
      if (res.headers['x-vercel-id']) {
        console.log(`   ‚úÖ –ü—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ Vercel`);
      } else {
        console.log(`   ‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ Vercel`);
      }
      
      resolve();
    });
    
    req.on('error', reject);
    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });
  });
}

async function main() {
  console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–æ–º–µ–Ω—É volingu.ru\n');
  
  await checkProjectDomain('volingu.ru');
  
  console.log('\nüìã –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ Vercel Dashboard:');
  console.log('1. Settings ‚Üí Domains ‚Üí –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–µ–∫—Ç "volingu-site"');
  console.log('2. –°—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "Valid Configuration"');
  console.log('3. –ï—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω - –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞');
  console.log('4. –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "Invalid" - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ DNS –∑–∞–ø–∏—Å–∏');
}

main().catch(console.error);
