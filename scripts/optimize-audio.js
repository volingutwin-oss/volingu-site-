const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ MB
function getFileSizeMB(filePath) {
  const stats = fs.statSync(filePath);
  return (stats.size / (1024 * 1024)).toFixed(2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
function analyzeAudioFiles() {
  const audioDir = path.join(__dirname, '../public/audio');
  const files = fs.readdirSync(audioDir);
  
  console.log('üìä –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:');
  console.log('='.repeat(50));
  
  let totalSize = 0;
  const largeFiles = [];
  
  files.forEach(file => {
    if (file.endsWith('.mp3')) {
      const filePath = path.join(audioDir, file);
      const sizeMB = parseFloat(getFileSizeMB(filePath));
      totalSize += sizeMB;
      
      console.log(`${file}: ${sizeMB} MB`);
      
      if (sizeMB > 0.5) {
        largeFiles.push({ file, size: sizeMB });
      }
    }
  });
  
  console.log('='.repeat(50));
  console.log(`üìà –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${totalSize.toFixed(2)} MB`);
  console.log(`‚ö†Ô∏è  –ë–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>0.5MB): ${largeFiles.length}`);
  
  if (largeFiles.length > 0) {
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    largeFiles.forEach(({ file, size }) => {
      console.log(`- ${file}: ${size} MB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∂–∞—Ç—å –¥–æ <0.3MB)`);
    });
  }
  
  return { totalSize, largeFiles };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
function createOptimizedVersions() {
  const audioDir = path.join(__dirname, '../public/audio');
  const optimizedDir = path.join(__dirname, '../public/audio-optimized');
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  if (!fs.existsSync(optimizedDir)) {
    fs.mkdirSync(optimizedDir, { recursive: true });
  }
  
  console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', optimizedDir);
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ FFmpeg –¥–ª—è —Å–∂–∞—Ç–∏—è –∞—É–¥–∏–æ:');
  console.log('   ffmpeg -i input.mp3 -b:a 64k -ar 22050 output.mp3');
  console.log('2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Å–∂–∞—Ç–∏—è');
  console.log('3. –ó–∞–º–µ–Ω–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏');
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('üöÄ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤...\n');
const analysis = analyzeAudioFiles();
createOptimizedVersions();

console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –°–æ–∂–º–∏—Ç–µ –±–æ–ª—å—à–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–æ <300KB –∫–∞–∂–¥—ã–π');
console.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç MP3 —Å –±–∏—Ç—Ä–µ–π—Ç–æ–º 64-128 kbps');
console.log('3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ WebM –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è');
console.log('4. –í–Ω–µ–¥—Ä–∏—Ç–µ –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)');
